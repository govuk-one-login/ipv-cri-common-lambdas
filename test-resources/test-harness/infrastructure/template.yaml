AWSTemplateFormatVersion: "2010-09-09"
Transform: [ AWS::LanguageExtensions, AWS::Serverless-2016-10-31 ]
Description: "Digital Identity CRI Test Automation Harness"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  CriIdentifier:
    Description: "The unique credential issuer identifier"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/CriIdentifier"
  TxmaStackName:
    Description: "The stack containing the TXMA infrastructure"
    Type: String
    Default: txma-infrastructure
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, localdev, build, staging]
    ConstraintDescription: must be dev, localdev, build or staging
  VpcStackName:
    Type: String
    Default: "cri-vpc"
    Description: The name of the VPC stack deployed.

Mappings:
  TestHarnessUrl:
      di-ipv-cri-check-hmrc-api:
        dev: review-hc.dev.account.gov.uk
        build: review-hc.build.account.gov.uk
        staging: review-hc.staging.account.gov.uk
      di-ipv-cri-address-api:
        dev: review-a.dev.account.gov.uk
        build: review-a.build.account.gov.uk
        staging: review-a.staging.account.gov.uk

Conditions:
  UseCodeSigningConfigArn:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
Globals:
  Function:
    Runtime: nodejs18.x
    VpcConfig:
      SecurityGroupIds:
        - !ImportValue cri-vpc-AWSServicesEndpointSecurityGroupId
      SubnetIds:
        - !ImportValue cri-vpc-PrivateSubnetIdA
        - !ImportValue cri-vpc-PrivateSubnetIdB
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigningConfigArn
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Timeout: 30 # seconds
    Tracing: Active
    MemorySize: 1024
    Architectures:
      - arm64
    Environment:
      Variables:
        AWS_STACK_NAME: !Sub ${AWS::StackName}
        POWERTOOLS_LOG_LEVEL: DEBUG
        POWERTOOLS_METRICS_NAMESPACE: !Ref CriIdentifier
    AutoPublishAlias: live

Resources:
  LambdaEgressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Permits outbound on port 443 from within the VPC to the internet.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  DequeueFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dequeue-handler.lambdaHandler
      CodeUri: ../lambdas/src
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: AuditEventDequeueFunction
          EVENTS_TABLE_NAME: !Ref AuditEventsTable
      Policies:
        - Statement:
            - Sid: DecryptAuditEventKeyPolicy
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                Fn::ImportValue: !Sub "${TxmaStackName}-AuditEventQueueEncryptionKeyArn"
            - Sid: ConsumeAuditEventPolicy
              Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
                - sqs:ReceiveMessage
              Resource:
                Fn::ImportValue: !Sub "${TxmaStackName}-AuditEventQueueArn"
            - Sid: PutEventsPolicy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                !GetAtt AuditEventsTable.Arn
      Events:
        AuditSQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::ImportValue: !Sub "${TxmaStackName}-AuditEventQueueArn"
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node18"
        Sourcemap: true
        EntryPoints:
          - dequeue-handler.ts

  DequeueFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DequeueFunction}"
      RetentionInDays: 30

  AuditEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
        - AttributeName: sortKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
        - AttributeName: sortKey
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: expiryDate
        Enabled: true

  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Description: APIGW for the test harness
      StageName: !Ref Environment
      TracingEnabled: true
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingRateLimit: 10000
          ThrottlingBurstLimit: 20000
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format:
          Fn::ToJsonString:
            requestId: $context.requestId
            ip: $context.identity.sourceIp
            requestTime: $context.requestTime
            httpMethod: $context.httpMethod
            path: $context.path
            routeKey: $context.routeKey
            status: $context.status
            protocol: $context.protocol
            responseLatency: $context.responseLatency
            responseLength: $context.responseLength
      DefinitionBody:
        openapi: 3.0.1
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: public-api.yaml
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-test-harness-AccessLogs
      RetentionInDays: 30

  TestHarnessCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub
        - ${AWS::StackName}.${TESTHARNESSURL}
        - TESTHARNESSURL:
            !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
      DomainNameConfigurations:
        - CertificateArn: !Ref ExternalCertificate
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  ExternalCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub
        - ${AWS::StackName}.${TESTHARNESSURL}
        - TESTHARNESSURL:
            !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
      SubjectAlternativeNames:
        - !Sub
          - ${AWS::StackName}.${TESTHARNESSURL}
          - TESTHARNESSURL:
              !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
      DomainValidationOptions:
        - DomainName:  !Sub
            - ${AWS::StackName}.${TESTHARNESSURL}
            - TESTHARNESSURL:
                !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
          HostedZoneId: !ImportValue PublicHostedZoneId
      ValidationMethod: DNS

  TestHarnessApiDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref TestHarnessCustomDomain
      Type: A
      HostedZoneId: !ImportValue PublicHostedZoneId
      AliasTarget:
        DNSName: !GetAtt TestHarnessCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt TestHarnessCustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

  # Base Path Mapping
  TestHarnessApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref TestHarnessCustomDomain
      RestApiId: !Ref APIGateway

      # workaround for sam bug - see https://github.com/aws/serverless-application-model/issues/192#issuecomment-520893111
      # noinspection YamlUnresolvedReferences
      Stage: !Ref APIGateway.Stage

  AuditEventsTableRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow APIGW to read from the AuditEventsTable
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: DynamoDBReadPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !GetAtt AuditEventsTable.Arn

Outputs:
  TestHarnessExecuteUrl:
    Description: API Gateway endpoint URL for the test harness endpoints
    Export:
      Name: !Sub ${AWS::StackName}-TestHarnessExecuteUrl
    Value: !Sub
      - https://${URL}/
      - URL: !Ref TestHarnessCustomDomain
