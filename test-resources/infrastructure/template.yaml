AWSTemplateFormatVersion: "2010-09-09"
Transform: [ AWS::LanguageExtensions, AWS::Serverless-2016-10-31 ]
Description: "Digital Identity CRI Test Automation Harness"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: ""
  PermissionsBoundary:
    Type: String
    Default: ""
  CriIdentifier:
    Description: "The unique credential issuer identifier"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/CriIdentifier"
  TxmaStackName:
    Description: "The stack containing the TXMA infrastructure"
    Type: String
    Default: txma-infrastructure
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, localdev, build, staging]
    ConstraintDescription: must be dev, localdev, build or staging
  VpcStackName:
    Type: String
    Default: "cri-vpc"
    Description: The name of the VPC stack deployed.
  CommonStackName:
    Description: "The name of the stack containing the common CRI lambdas/infra"
    Type: String
    Default: common-cri-api

Mappings:
  TestHarnessUrl:
      di-ipv-cri-check-hmrc-api:
        localdev: review-hc.dev.account.gov.uk
        dev: review-hc.dev.account.gov.uk
        build: review-hc.build.account.gov.uk
        staging: review-hc.staging.account.gov.uk
      di-ipv-cri-address-api:
        localdev: review-a.dev.account.gov.uk
        dev: review-a.dev.account.gov.uk
        build: review-a.build.account.gov.uk
        staging: review-a.staging.account.gov.uk
      di-ipv-cri-kbv-api:
        localdev: review-k.dev.account.gov.uk
        dev: review-k.dev.account.gov.uk
        build: review-k.build.account.gov.uk
        staging: review-k.staging.account.gov.uk
  CriVpcMapping:
    di-ipv-cri-check-hmrc-api:
      pipeline: "di-devplatform-deploy"
    di-ipv-cri-address-api:
      pipeline: "di-ipv-cri-pipeline-deployment"
    di-ipv-cri-kbv-api:
      pipeline: "di-ipv-cri-pipeline-deployment"

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W8003

Conditions:
  EnforceCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, ""]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, ""]]
  DequeueEvents: !Not [!Equals [!Ref Environment, localdev]]
  # Don't create domain resources for the common dev account as there are none
  CreateDomainResources: !Not [!Equals [!Sub "${AWS::AccountId}", "486210938254"]]
  IsDevPlatformDeploy: !Equals [ !FindInMap [ CriVpcMapping, !Ref CriIdentifier, "pipeline"  ], "di-devplatform-deploy" ]

Globals:
  Function:
    CodeUri: ..
    Timeout: 30
    Runtime: nodejs22.x
    Architectures: [arm64]
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    VpcConfig:
      SecurityGroupIds:
        - !ImportValue cri-vpc-AWSServicesEndpointSecurityGroupId
      SubnetIds: !If
        - IsDevPlatformDeploy
        - [ !ImportValue cri-vpc-ProtectedSubnetIdA, !ImportValue cri-vpc-ProtectedSubnetIdB ]
        - [ !ImportValue cri-vpc-PrivateSubnetIdA, !ImportValue cri-vpc-PrivateSubnetIdB ]
    Tracing: Active
    MemorySize: 1024
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        POWERTOOLS_METRICS_NAMESPACE: !Ref CriIdentifier
        POWERTOOLS_LOG_LEVEL: DEBUG
        COMMON_PARAMETER_NAME_PREFIX: !Ref CommonStackName
        AWS_STACK_NAME: !Sub ${AWS::StackName}
    AutoPublishAlias: live

Resources:
  LambdaEgressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Permits outbound on port 443 from within the VPC to the internet.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  CallbackFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: headless-core-stub/lambdas/callback/src/callback-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      Environment:
        Variables:
          CRI_IDENTIFIER: !Sub "${CriIdentifier}"
          AWS_STACK_NAME: !Ref CommonStackName
          TEST_RESOURCES_PARAMETER_PREFIX: "test-resources"
          SESSION_TABLE: !Sub session-${CommonStackName}
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParametersByPath
                - ssm:GetParameters
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/clients/*/jwtAuthentication/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/test-resources/ipv-core-stub-aws-headless/privateSigningKey"

  CallbackFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CallbackFunction}"
      RetentionInDays: 30

  CallbackFunctionAliasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CallbackFunction.Alias
      Principal: apigateway.amazonaws.com

  DequeueFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: audit-events-test-harness/lambdas/src/dequeue-handler.lambdaHandler
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue cri-vpc-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue cri-vpc-PrivateSubnetIdA
          - !ImportValue cri-vpc-PrivateSubnetIdB
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: AuditEventDequeueFunction
          EVENTS_TABLE_NAME: !Ref AuditEventsTable
      Policies:
        - Statement:
            - Sid: DecryptAuditEventKeyPolicy
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                Fn::ImportValue: !Sub "${TxmaStackName}-AuditEventQueueEncryptionKeyArn"
            - Sid: ConsumeAuditEventPolicy
              Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
                - sqs:ReceiveMessage
              Resource:
                Fn::ImportValue: !Sub "${TxmaStackName}-AuditEventQueueArn"
            - Sid: PutEventsPolicy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                !GetAtt AuditEventsTable.Arn
      Events:
        AuditSQSEvent:
          Type: SQS
          Properties:
            Enabled: !If [DequeueEvents, true, false]
            Queue:
              Fn::ImportValue: !Sub "${TxmaStackName}-AuditEventQueueArn"
            FunctionResponseTypes:
              - ReportBatchItemFailures

  DequeueFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DequeueFunction}"
      RetentionInDays: 30

  AuditEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
        - AttributeName: sortKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
        - AttributeName: sortKey
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: expiryDate
        Enabled: true

  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Description: APIGW for the test harness
      StageName: !Ref Environment
      TracingEnabled: true
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingRateLimit: 10000
          ThrottlingBurstLimit: 20000
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format:
          Fn::ToJsonString:
            requestId: $context.requestId
            ip: $context.identity.sourceIp
            requestTime: $context.requestTime
            httpMethod: $context.httpMethod
            path: $context.path
            routeKey: $context.routeKey
            status: $context.status
            protocol: $context.protocol
            responseLatency: $context.responseLatency
            responseLength: $context.responseLength
      DefinitionBody:
        openapi: 3.0.1
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: public-api.yaml
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-test-harness-AccessLogs
      RetentionInDays: 30

  TestHarnessCustomDomain:
    Condition: CreateDomainResources
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub
        - ${AWS::StackName}.${TESTHARNESSURL}
        - TESTHARNESSURL:
            !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
      DomainNameConfigurations:
        - CertificateArn: !Ref ExternalCertificate
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  ExternalCertificate:
    Condition: CreateDomainResources
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub
        - ${AWS::StackName}.${TESTHARNESSURL}
        - TESTHARNESSURL:
            !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
      SubjectAlternativeNames:
        - !Sub
          - ${AWS::StackName}.${TESTHARNESSURL}
          - TESTHARNESSURL:
              !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
      DomainValidationOptions:
        - DomainName:  !Sub
            - ${AWS::StackName}.${TESTHARNESSURL}
            - TESTHARNESSURL:
                !FindInMap [ TestHarnessUrl, !Ref CriIdentifier, !Ref Environment ]
          HostedZoneId: !ImportValue PublicHostedZoneId
      ValidationMethod: DNS

  TestHarnessApiDomainRecord:
    Condition: CreateDomainResources
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref TestHarnessCustomDomain
      Type: A
      HostedZoneId: !ImportValue PublicHostedZoneId
      AliasTarget:
        DNSName: !GetAtt TestHarnessCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt TestHarnessCustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

  # Base Path Mapping
  TestHarnessApiBasePathMapping:
    Condition: CreateDomainResources
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref TestHarnessCustomDomain
      RestApiId: !Ref APIGateway

      # workaround for sam bug - see https://github.com/aws/serverless-application-model/issues/192#issuecomment-520893111
      # noinspection YamlUnresolvedReferences
      Stage: !Ref APIGateway.Stage

  AuditEventsTableRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow APIGW to read from the AuditEventsTable
      PermissionsBoundary:
        !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: DynamoDBReadPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !GetAtt AuditEventsTable.Arn

Outputs:
  TestHarnessExecuteUrl:
    Description: API Gateway endpoint URL for the test harness endpoints
    Export:
      Name: !Sub ${AWS::StackName}-TestHarnessExecuteUrl
    Value: !If
      - CreateDomainResources
      - !Sub
        - https://${URL}/
        - URL: !Ref TestHarnessCustomDomain
      - !Sub https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
