AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity IPV CRI common API"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  AuditEventNamePrefix:
    Description: "The audit event name prefix"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/AuditEventNamePrefix"
  CriIdentifier:
    Description: "The unique credential issuer identifier"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/CriIdentifier"

Conditions:
  UseCodeSigningConfigArn:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  IsStubEnvironment: !Or
    - !Equals [!Ref Environment, dev]
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
  IsProdLikeEnvironment: !Or
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  IsNotProdLikeEnvironment: !Not
    - Condition: IsProdLikeEnvironment
  IsProdEnvironment: !Equals
    - !Ref Environment
    - production
  IsDevEnvironment: !Equals
    - !Ref Environment
    - dev
  IsDevPlatformDeploy: !Equals
    - !FindInMap [CriVpcMapping, !Ref CriIdentifier, "pipeline"]
    - "di-devplatform-deploy"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

  IsCSLSDisabled: !And
    - !Not
      - !Or
        - !Equals [!Ref CriIdentifier, "di-ipv-cri-check-hmrc-api"]
        - !Equals [!Ref CriIdentifier, "di-ipv-cri-kbv-hmrc-api"]
    - !Not
      - !Equals [!Ref Environment, "dev"]

Globals:
  Function:
    VpcConfig:
      SecurityGroupIds: !If
        - IsDevPlatformDeploy
        - [!ImportValue cri-vpc-AWSServicesEndpointSecurityGroupId]
        - [!ImportValue cri-vpc-LambdaSecurityGroup]
      SubnetIds: !If
        - IsDevPlatformDeploy
        - [
            !ImportValue cri-vpc-PrivateSubnetIdA,
            !ImportValue cri-vpc-PrivateSubnetIdB,
          ]
        - !Split [",", !ImportValue cri-vpc-PrivateSubnets]
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigningConfigArn
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Timeout: 30 # seconds
    AutoPublishAlias: live
    Tracing: Active
    MemorySize: !FindInMap [MemorySizeMapping, Environment, !Ref "Environment"]
    Architectures:
      - arm64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        AWS_STACK_NAME: !Sub ${AWS::StackName}
        POWERTOOLS_LOG_LEVEL: INFO
        POWERTOOLS_METRICS_NAMESPACE: !Ref CriIdentifier
        SQS_AUDIT_EVENT_PREFIX: !Ref AuditEventNamePrefix
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_CONNECTION_BASE_URL: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_CLUSTER_ID: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_TENANT: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"

Metadata: &MappingsBase
  di-ipv-cri-address-api: &ReviewA
    domain: review-a
  di-ipv-cri-fraud-api: &ReviewF
    domain: review-f
  di-ipv-cri-kbv-api: &ReviewK
    domain: review-k
  di-ipv-cri-dl-api: &ReviewD
    domain: review-d
  di-ipv-cri-passport-api: &ReviewP
    domain: review-p
  di-ipv-cri-toy-api: &ReviewToy
    domain: review-toy
  di-ipv-cri-kbv-hmrc-api: &ReviewHk
    domain: review-hk
  di-ipv-cri-check-hmrc-api: &ReviewHc
    domain: review-hc

Mappings:
  CriAudienceMapping:
    <<: *MappingsBase
  VerifiableCredentialIssuerMapping:
    <<: *MappingsBase

  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables

  MemorySizeMapping:
    Environment:
      dev: 2048
      build: 3072
      staging: 2048
      integration: 2048
      production: 3072

  SessionTtlMapping:
    Environment:
      dev: 7200 # 2 hours
      build: 7200 # 2 hours
      staging: 7200 # 2 hours
      integration: 7200 # 2 hours
      production: 7200 # 2 hours

  CriVpcMapping:
    di-ipv-cri-address-api:
      pipeline: "di-ipv-cri-pipeline-deployment"
    di-ipv-cri-fraud-api:
      pipeline: "di-ipv-cri-pipeline-deployment"
    di-ipv-cri-kbv-api:
      pipeline: "di-ipv-cri-pipeline-deployment"
    di-ipv-cri-dl-api:
      pipeline: "di-ipv-cri-pipeline-deployment"
    di-ipv-cri-passport-api:
      pipeline: "di-devplatform-deploy"
    di-ipv-cri-toy-api:
      pipeline: "di-devplatform-deploy"
    di-ipv-cri-kbv-hmrc-api:
      pipeline: "di-devplatform-deploy"
    di-ipv-cri-check-hmrc-api:
      pipeline: "di-devplatform-deploy"

  IPVCore1PublicSigningJwkBase64Mapping:
    Environment:
      staging: "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6ImtlMVRNRnFNb0Z5eHg1eXpOdFFRbGw0dk9yeHZUdFBKQ0huUzRqOHpoMlUiLCJ5IjoicURLX0g4QXpKS2FIbU1zaHg5TGp2LTB0ek5rV2EtSkVHUzJtZHRKUjFPQSJ9"
      integration: "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IkJUUWdWQjU0RE9JcDU0eGRVSVg0SGtUX3pCdjZHdVdMV1RUTkdxMk15dEkiLCJ5IjoiTFFRamx5ZEtOMUhXZFJQcFBpalJObEJrbi1qaDgzZzBBUmIyNms2WVh1byJ9"
      production: "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IlVQdlU1TlBtRUxyV2lXU01WZkREN0c4dTNFSllyeXFQSVo0Nlc5TUFsUmMiLCJ5Ijoicjc3RjItS1BocHZUSUdFV2d0NVNtYXZTdkJVSENxV1V4RDZSR19GSkhWayJ9"

  IPVCore1RedirectURIMapping:
    di-ipv-cri-address-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=address"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=address"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=address"
    di-ipv-cri-fraud-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=fraud"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=fraud"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=fraud"
    di-ipv-cri-kbv-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=kbv"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=kbv"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=kbv"
    di-ipv-cri-dl-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=drivingLicence"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=drivingLicence"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=drivingLicence"
    di-ipv-cri-passport-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=ukPassport"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=ukPassport"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=ukPassport"
    di-ipv-cri-toy-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=toy"
    di-ipv-cri-check-hmrc-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=checkHmrc"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=checkHmrc"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=checkHmrc"
    di-ipv-cri-kbv-hmrc-api:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=kbvHmrc"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=kbvHmrc"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=kbvHmrc"

  IPVCore1IssuerMapping:
    Environment:
      staging: "https://identity.staging.account.gov.uk"
      integration: "https://identity.integration.account.gov.uk"
      production: "https://identity.account.gov.uk"

Resources:
  ####################################################################
  #
  # Stub Audit Event Consumer  
  #
  #####################################################################

  AuditEventConsumerFunction:
    Type: AWS::Serverless::Function
    Condition: IsNotProdLikeEnvironment
    Properties:
      Handler: audit-event-consumer-handler.lambdaHandler
      CodeUri: ../../lambdas
      Runtime: nodejs18.x
      FunctionName: !Sub "${AWS::StackName}-AuditEventConsumerFunction"
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-audit-event-consumer"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
                - "sqs:ReceiveMessage"
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
              Resource:
                - !Sub
                  - "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${queueName}"
                  - queueName: !ImportValue AuditEventQueueName
        - Statement:
            - Effect: Allow
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node18"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/audit-event-consumer-handler.ts
        External:
          - "@aws-sdk/*"
  
  AuditEventConsumerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsNotProdLikeEnvironment
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuditEventConsumerFunction}"
      RetentionInDays: 30

  AuditEventConsumerFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsNotProdLikeEnvironment
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !Sub
        - "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${queueName}"
        - queueName: !ImportValue AuditEventQueueName
      FunctionName: !Ref AuditEventConsumerFunction

  #########################################################################
  #
  # Common OAuth Lambdas and associated resources                                                  
  # FunctionNames are hard-coded for use in the private-api.yaml file     
  # Which all CRI's the use common-lambda reference                       
  # They should therefore not be removed
  #
  ########################################################################

  SessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SessionFunction" # DO NOT remove
      CodeUri: ../../session
      Handler: uk.gov.di.ipv.cri.common.api.handler.SessionHandler::handleRequest
      Runtime: java11
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:JAVA_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-session"
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName: !Ref SessionTable
        - DynamoDBWritePolicy:
            TableName: !Ref PersonIdentityTable
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - KMSDecryptPolicy:
            KeyId: !ImportValue core-infrastructure-CriDecryptionKey1Id
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTtl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/KBVCriAudience"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/AuthRequestKmsEncryptionKeyId"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/PersonIdentityTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/verifiable-credential/issuer"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/clients/*"
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn

  SessionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SessionFunction}"
      RetentionInDays: 30

  SessionFunctionLogGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsCSLSDisabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref SessionFunctionLogGroup

  SessionFunctionTS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SessionFunctionTS"
      CodeUri: ../../lambdas
      Handler: session-handler.lambdaHandler
      Runtime: nodejs18.x
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-sessionTS"
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName: !Ref SessionTable
        - DynamoDBWritePolicy:
            TableName: !Ref PersonIdentityTable
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - KMSDecryptPolicy:
            KeyId: !ImportValue core-infrastructure-CriDecryptionKey1Id
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients/*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTtl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/KBVCriAudience"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/AuthRequestKmsEncryptionKeyId"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/PersonIdentityTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/verifiable-credential/issuer"
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node18"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/session-handler.ts
        External:
          - "@aws-sdk/*"
  SessionFunctionTSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SessionFunctionTS}"
      RetentionInDays: 30

  SessionFunctionLogGroupSubscriptionFilterCSLSTS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsCSLSDisabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref SessionFunctionTSLogGroup

  AuthorizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AuthorizationFunction" # DO NOT Remove
      CodeUri: ../../authorization
      Handler: uk.gov.di.ipv.cri.common.api.handler.AuthorizationHandler::handleRequest
      Runtime: java11
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:JAVA_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-authorization"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName: !Ref SessionTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTableName"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/clients/*"

  AuthorizationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthorizationFunction}"
      RetentionInDays: 30

  AuthorizationFunctionTS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AuthorizationFunctionTS"
      CodeUri: ../../lambdas
      Handler: authorization-handler.lambdaHandler
      Runtime: nodejs18.x
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-authorizationTS"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName: !Ref SessionTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients/*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTableName"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node18"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/authorization-handler.ts
        External:
          - "@aws-sdk/*"

  AuthorizationFunctionTSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthorizationFunctionTS}"
      RetentionInDays: 30

  AuthorizationFunctionLogGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsCSLSDisabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref AuthorizationFunctionLogGroup

  AuthorizationFunctionLogGroupSubscriptionFilterCSLSTS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsCSLSDisabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref AuthorizationFunctionTSLogGroup

  AccessTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AccessTokenFunction" # DO NOT Remove
      CodeUri: ../../accesstoken
      Handler: uk.gov.di.ipv.cri.common.api.handler.AccessTokenHandler::handleRequest
      Runtime: java11
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:JAVA_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-access-token"
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              Ref: SessionTable
        - DynamoDBWritePolicy:
            TableName:
              Ref: SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTtl"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/clients/*"

  AccessTokenFunctionTS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AccessTokenFunctionTS" # DO NOT Remove
      Handler: access-token-handler.lambdaHandler
      CodeUri: ../../lambdas
      Runtime: nodejs18.x
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-access-token-2"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Ref: SessionTable
        - DynamoDBWritePolicy:
            TableName:
              Ref: SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTtl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/clients/*"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node18"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/access-token-handler.ts
        External:
          - "@aws-sdk/*"

  AccessTokenTSFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AccessTokenFunctionTS}"
      RetentionInDays: 30

  AccessTokenTSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AccessTokenFunctionTS.Arn
      Principal: apigateway.amazonaws.com

  AccessTokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AccessTokenFunction}"
      RetentionInDays: 30

  AccessTokenFunctionLogGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsCSLSDisabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref AccessTokenFunctionLogGroup

  AccessTokenFunctionLogGroupSubscriptionFilterCSLSTS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsCSLSDisabled
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref AccessTokenTSFunctionLogGroup

  SessionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "session-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
        - AttributeName: "authorizationCode"
          AttributeType: "S"
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "authorizationCode-index"
          KeySchema:
            - AttributeName: "authorizationCode"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "redirectUri"
              - "clientId"
            ProjectionType: "INCLUDE"
        - IndexName: "access-token-index"
          KeySchema:
            - AttributeName: "accessToken"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "sessionId"
              - "subject"
            ProjectionType: "INCLUDE"
      TimeToLiveSpecification:
        AttributeName: expiryDate
        Enabled: true

  PersonIdentityTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "person-identity-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: expiryDate
        Enabled: true

  ParameterSessionTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/SessionTableName"
      Value: !Sub session-${AWS::StackName}
      Type: String
      Description: session dynamodb table name

  ParameterPersonIdentityTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/PersonIdentityTableName"
      Value: !Sub person-identity-${AWS::StackName}
      Type: String
      Description: person identity dynamodb table name

  SessionTtlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/SessionTtl"
      Type: String
      Value: !FindInMap [SessionTtlMapping, Environment, !Ref "Environment"]
      Description: default time to live for a session item (seconds)

  VerifiableCredentialIssuerParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/verifiable-credential/issuer"
      Type: String
      Value: !If
        - IsProdEnvironment
        - !Sub
          - "https://${Domain}.account.gov.uk"
          - Domain:
              !FindInMap [
                VerifiableCredentialIssuerMapping,
                !Ref CriIdentifier,
                domain,
              ]
        - !Sub
          - "https://${Domain}.${Environment}.account.gov.uk"
          - Domain:
              !FindInMap [
                VerifiableCredentialIssuerMapping,
                !Ref CriIdentifier,
                domain,
              ]
      Description: Issuer of the Verifiable Credential

  SessionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SessionFunction.Arn
      Principal: apigateway.amazonaws.com

  SessionFunctionTSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SessionFunctionTS.Arn
      Principal: apigateway.amazonaws.com

  AccessTokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AccessTokenFunction.Arn
      Principal: apigateway.amazonaws.com

  AuthorizationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthorizationFunction.Arn
      Principal: apigateway.amazonaws.com

  AuthorizationFunctionTSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthorizationFunctionTS.Arn
      Principal: apigateway.amazonaws.com

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  CreateAuthCodeFunction:
    Type: AWS::Serverless::Function
    Condition: IsDevEnvironment
    Properties:
      FunctionName: !Sub "${AWS::StackName}-CreateAuthCodeFunction" # DO NOT Remove
      CodeUri: ../../lambdas
      Handler: create-auth-code-handler.lambdaHandler
      Runtime: nodejs18.x
      Layers:
        - !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-create-auth-code"
      Policies:
        - DynamoDBWritePolicy:
            TableName:
              Ref: SessionTable
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/clients/*"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "node18"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/create-auth-code-handler.ts
        External:
          - "@aws-sdk/*"

  CreateAuthCodeFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: IsDevEnvironment
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthCodeFunction.Arn
      Principal: apigateway.amazonaws.com

  PreMergeDevOnlyApi:
    Type: AWS::Serverless::Api
    Condition: IsDevEnvironment
    Properties:
      Description: CRI API Gateway for pre-merge testing in dev only
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      AccessLogSetting:
        DestinationArn: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${PreMergeDevOnlyApiAccessLogGroup}"
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      Name: !Sub "common-lambdas-${AWS::StackName}"
      StageName: !Ref Environment
      DefinitionBody:
        openapi: "3.0.1" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: {} # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./pre-merge-api.yaml"
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL

  PreMergeDevOnlyApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsDevEnvironment
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-${PreMergeDevOnlyApi}-private-AccessLogs
      RetentionInDays: 7

  ########################################################################################################
  #
  # KMS Keys to decrypt JWE and to sign JWT (VC)
  # 
  # AuthRequestKmsEncryptionKeyIdParameter: Parameter with KMS Key to decrypt the JWE
  # VerifiableCredentialKmsSigningKeyParameter: Parameter with KMS Key to sign the VerifiableCredential (VC)
  ##########################################################################################################
  VerifiableCredentialKmsSigningKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/verifiableCredentialKmsSigningKeyId"
      Type: String
      Value: !ImportValue core-infrastructure-CriVcSigningKey1Id
      Description: Verifiable Credential Key Id

  AuthRequestKmsEncryptionKeyIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/AuthRequestKmsEncryptionKeyId"
      Type: String
      Value: !ImportValue core-infrastructure-CriDecryptionKey1Id
      Description: The (KMS) encryption key identifier for decrypting authorisation requests

  ################################################################################################
  # Configuration for clients used by CRI'S
  ################################################################################################
  # 
  # ipv-core-stub-aws-build client configuration
  #
  #################################################################################################
  IPVCoreStubAwsBuildClient:
    Condition: IsStubEnvironment
    Type: AWS::Serverless::Application
    Properties:
      Location: ./clientConfiguration.yaml
      Parameters:
        Id: ipv-core-stub-aws-build
        ParentStackName: !Ref "AWS::StackName"
        Issuer: "https://cri.core.build.stubs.account.gov.uk"
        RedirectUrl: https://cri.core.build.stubs.account.gov.uk/callback
        Audience: !If
          - IsProdEnvironment
          - !Sub
            - "https://${Domain}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]
          - !Sub
            - "https://${Domain}.${Environment}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]

  #################################################################################################
  #
  # ipv-core-stub-pre-prod-aws-build client configuration
  #
  #################################################################################################
  IPVCoreStubPreProdAwsBuildClient:
    Condition: IsProdEnvironment
    Type: AWS::Serverless::Application
    Properties:
      Location: ./clientConfiguration.yaml
      Parameters:
        Id: ipv-core-stub-pre-prod-aws-build
        ParentStackName: !Ref "AWS::StackName"
        Issuer: "https://cri-preprod.core.build.stubs.account.gov.uk"
        RedirectUrl: "https://cri-preprod.core.build.stubs.account.gov.uk/callback"
        Audience: !If
          - IsProdEnvironment
          - !Sub
            - "https://${Domain}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]
          - !Sub
            - "https://${Domain}.${Environment}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]

  #################################################################################################
  #
  # ipv-core-stub-aws-prod client configuration
  #
  #################################################################################################
  IPVCoreStubAwsProdClient:
    Condition: IsStubEnvironment
    Type: AWS::Serverless::Application
    Properties:
      Location: ./clientConfiguration.yaml
      Parameters:
        Id: ipv-core-stub-aws-prod
        ParentStackName: !Ref "AWS::StackName"
        Issuer: "https://cri.core.stubs.account.gov.uk"
        RedirectUrl: "https://cri.core.stubs.account.gov.uk/callback"
        Audience: !If
          - IsProdEnvironment
          - !Sub
            - "https://${Domain}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]
          - !Sub
            - "https://${Domain}.${Environment}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]

  #################################################################################################
  #
  # ipv-core-stub-pre-prod client configuration
  #
  #################################################################################################
  IPVCoreStubPreProdClient:
    Condition: IsProdEnvironment
    Type: AWS::Serverless::Application
    Properties:
      Location: ./clientConfiguration.yaml
      Parameters:
        Id: ipv-core-stub-pre-prod
        ParentStackName: !Ref "AWS::StackName"
        Issuer: "https://cri-preprod.core.stubs.account.gov.uk"
        RedirectUrl: "https://cri-preprod.core.stubs.account.gov.uk/callback"
        Audience: !If
          - IsProdEnvironment
          - !Sub
            - "https://${Domain}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]
          - !Sub
            - "https://${Domain}.${Environment}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]

  #################################################################################################
  #
  # ipv-core client configuration
  #
  #################################################################################################
  IPVCore1StubAwsProdClient:
    Condition: IsProdLikeEnvironment
    Type: AWS::Serverless::Application
    Properties:
      Location: ./clientConfiguration.yaml
      Parameters:
        Id: ipv-core
        ParentStackName: !Ref "AWS::StackName"
        Issuer:
          !FindInMap [IPVCore1IssuerMapping, Environment, !Ref Environment]
        RedirectUrl:
          !FindInMap [
            IPVCore1RedirectURIMapping,
            !Ref CriIdentifier,
            !Ref Environment,
          ]
        Audience: !If
          - IsProdEnvironment
          - !Sub
            - "https://${Domain}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]
          - !Sub
            - "https://${Domain}.${Environment}.account.gov.uk"
            - Domain:
                !FindInMap [CriAudienceMapping, !Ref CriIdentifier, domain]
        Base64PublicSigningJwk:
          !FindInMap [
            IPVCore1PublicSigningJwkBase64Mapping,
            Environment,
            !Ref Environment,
          ]
  
  ####################################################################################################

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"
  PreMergeDevOnlyApiId:
    Condition: IsDevEnvironment
    Description: "API GatewayID of the dev-only common lambdas API"
    Value: !Sub "${PreMergeDevOnlyApi}"
